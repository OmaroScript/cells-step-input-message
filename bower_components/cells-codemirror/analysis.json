{
  "schema_version": "1.0.0",
  "elements": [
    {
      "description": "# &lt;cells-codemirror&gt;\n\n![Certificated](https://img.shields.io/badge/certificated-yes-brightgreen.svg) ![Polymer 2.x](https://img.shields.io/badge/Polymer-2.x-green.svg)\n\n[Demo of component in Cells Catalog](https://catalogs.platform.bbva.com/cells)\n\n`<cells-codemirror>` uses [**CodeMirror**](https://codemirror.net/) to provide a **text editor for the browser**.\n\nThe component includes two files:\n\n- `codemirror-imports.html`: Is an **HTML import** that includes the JavaScript files required by CodeMirror. **Should be imported before `cells-codemirror.html`**\n- `cells-codemirror.html`: The CodeMirror editor as Web Component.\n\n`codemirror-imports.html` is not imported by `cells-codemirror.html` to prevent multiple instances of the component requesting the same JavaScript files multiple times.\n\n## Themes\nIt includes **4 themes**:\n\n- cells (light - default)\n- mdn-like (light)\n- monokai (dark)\n- material (dark)\n\nMore themes can be used by copying the CSS of a CodeMirror's theme in a style module (shared style) with `cells-codemirror-shared-styles` ID.\n\n## Editor content\nThe editor content can be set in two ways: using `content` property or `source-element` attribute with a CSS selector of the element containing the code to render. The referenced element can be placed at any point in the document (not necessarily in the component's Light DOM).\n\nIs recommended to place the content inside a `<template>` or a `<script>` tag (for the `javascript` mode) with an unrecognized `type` attribute by the browser to prevent the code to be executed.\n\n`source-element` has precedence over `content` property and changing `content` when `source-element` is used has no effect. If you want to change the editor content use `content` instead of `source-element`.\n\n**Example using `content` property:**\n\n```html\n<cells-codemirror></cells-codemirror>\n\n<script>\n  const editorContent = someElement.innerHTML;\n  document.querySelector('cells-codemirror').content = editorContent;\n</script>\n```\n\n**Example using `source-element` attribute:**\n\n```html\n<cells-codemirror source-element=\"#code\">\n  <template id=\"code\">\n    <sample-tag attribute=\"value\"></sample-tag>\n  </template>\n</cells-codemirror>\n```\n\n```html\n<cells-codemirror source-element=\"#code\" mode=\"javascript\">\n  <script type=\"unrecognized\" id=\"code\">\n    function sayHello() {\n      alert('hello');\n    }\n  </script>\n</cells-codemirror>\n```\n\n## Changing the editor's height\n\nBy default the CodeMirror editor takes the 100% of the available space. To limit the height, wrap the component in a layer with a fixed height or set a fixed height for `<cells-codemirror>`.\n\nExample:\n\n```html\n<div class=\"wrapper\" style=\"height: 300px;\">\n  <cells-codemirror></cells-codemirror>\n</div>\n```\n\n## Styling\n\nThe following custom properties and mixins are available for styling:\n\n### Custom Properties\n| Custom Property                                    | Selector                       | CSS Property     | Value                                                                |\n| -------------------------------------------------- | ------------------------------ | ---------------- | -------------------------------------------------------------------- |\n| --cells-codemirror-editor-wrapper                  | .editor-wrapper                | height           | 100%                                                                 |\n| --cells-codemirror-code-font-family                | .CodeMirror                    | font-family      | Consolas, Monaco, \"Andale Mono\", \"Ubuntu Mono\", monospace            |\n| --cells-codemirror-code-font-size                  | .CodeMirror                    | font-size        | 0.9375rem                                                            |\n| --cells-codemirror-line-highlight-background-color | .cm-s-mdn-like .line-highlight | background-color | ![#ffc](https://placehold.it/15/ffc/000000?text=+) #ffc              |\n| --cells-codemirror-line-highlight-background-color | .cm-s-monokai .line-highlight  | background-color | ![#42423b](https://placehold.it/15/42423b/000000?text=+) #42423b     |\n| --cells-codemirror-line-highlight-background-color | .cm-s-material .line-highlight | background-color | ![#3c5461](https://placehold.it/15/3c5461/000000?text=+) #3c5461     |\n| --cells-codemirror-code-font-family                | .cm-s-cells.CodeMirror         | font-family      | Fira Mono, Consolas, Monaco, \"Andale Mono\", \"Ubuntu Mono\", monospace |\n| --cells-codemirror-code-font-size                  | .cm-s-cells.CodeMirror         | font-size        | 0.875rem                                                             |\n| --cells-codemirror-line-highlight-background-color | .cm-s-cells .line-highlight    | background-color | ![#ffc](https://placehold.it/15/ffc/000000?text=+) #ffc              |\n### @apply\n| Mixins             | Selector | Value |\n| ------------------ | -------- | ----- |\n| --cells-codemirror | :host    | {}    |",
      "summary": "CodeMirror text editor",
      "path": "cells-codemirror/cells-codemirror.js",
      "properties": [
        {
          "name": "content",
          "type": "string | null | undefined",
          "description": "Code to render. Use this property instead of `sourceElement`\nif you want to update the editor's content.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 122,
              "column": 8
            },
            "end": {
              "line": 124,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          }
        },
        {
          "name": "sourceElement",
          "type": "string | null | undefined",
          "description": "CSS selector of an element with the content to display using `innerHTML`.\nThe element can be any HTML element but it's recommended to use a `<template>`\nor a `<script type=\"unrecognized\">` for the javascript mode to prevent the\nbrowser executing the code. The element is found using `document.querySelector()`\nso it can be placed in the component's Light DOM or at any other point in the document.\n\nHas precedence over `content` property.\nUpdating `content` when `sourceElement` is used has no effect.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 136,
              "column": 8
            },
            "end": {
              "line": 138,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          }
        },
        {
          "name": "_code",
          "type": "string | null | undefined",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 140,
              "column": 8
            },
            "end": {
              "line": 143,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "String"
            }
          }
        },
        {
          "name": "theme",
          "type": "string | null | undefined",
          "description": "Theme to use. (material | mdn-like | monokai | cells).",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 148,
              "column": 8
            },
            "end": {
              "line": 151,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"cells\""
        },
        {
          "name": "tabSize",
          "type": "number | null | undefined",
          "description": "Width of the tab character.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 156,
              "column": 8
            },
            "end": {
              "line": 159,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          },
          "defaultValue": "2"
        },
        {
          "name": "lineNumbers",
          "type": "boolean | null | undefined",
          "description": "Whether to show line numbers to the left of the editor.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 164,
              "column": 8
            },
            "end": {
              "line": 167,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "mode",
          "type": "string | null | undefined",
          "description": "Language mode.\nSupported modes are `javascript`, `css` and `htmlmixed` (default).",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 173,
              "column": 8
            },
            "end": {
              "line": 176,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"htmlmixed\""
        },
        {
          "name": "autofocus",
          "type": "boolean | null | undefined",
          "description": "Sets whether the editor should focus itself on initialization.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 181,
              "column": 8
            },
            "end": {
              "line": 184,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "readonly",
          "type": "boolean | null | undefined",
          "description": "Sets the editor as read-only (not editable).",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 189,
              "column": 8
            },
            "end": {
              "line": 192,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "nocursor",
          "type": "boolean | null | undefined",
          "description": "Disables focusing the editor when `readonly` is set to `true`.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 197,
              "column": 8
            },
            "end": {
              "line": 200,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "_readonly",
          "type": "string | null | undefined",
          "description": "CodeMirror's readOnly property can be Boolean or String with the\nspecial value `nocursor` that disallows focusing the editor.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 206,
              "column": 8
            },
            "end": {
              "line": 209,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "String"
            }
          }
        },
        {
          "name": "_noSelection",
          "type": "boolean | null | undefined",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 211,
              "column": 8
            },
            "end": {
              "line": 214,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "true"
        },
        {
          "name": "formatButton",
          "type": "boolean | null | undefined",
          "description": "Sets whether to show a button to format the selected text.\nThe button is disabled until a selection is made.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 220,
              "column": 8
            },
            "end": {
              "line": 223,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "editor",
          "type": "Object | null | undefined",
          "description": "The CodeMirror instance. You can use it to call any CodeMirror method\nnot provided by this component once the editor is initialized.\nCodeMirror docs: https://codemirror.net/doc/manual.html#api",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 230,
              "column": 8
            },
            "end": {
              "line": 232,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Object"
            }
          }
        },
        {
          "name": "highlightLines",
          "type": "string | null | undefined",
          "description": "Highlight one or multiple lines separated by commas. (1,3,7)\nTo specify a range separate the from and to values by a dash. (5-9)",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 238,
              "column": 8
            },
            "end": {
              "line": 240,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          }
        }
      ],
      "methods": [
        {
          "name": "connectedCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 264,
              "column": 4
            },
            "end": {
              "line": 270,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_cleanIndentation",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 272,
              "column": 4
            },
            "end": {
              "line": 275,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "str"
            }
          ]
        },
        {
          "name": "_computeCode",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 277,
              "column": 4
            },
            "end": {
              "line": 283,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "content"
            },
            {
              "name": "sourceElement"
            }
          ]
        },
        {
          "name": "_computeReadonly",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 285,
              "column": 4
            },
            "end": {
              "line": 287,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "readonly"
            },
            {
              "name": "nocursor"
            }
          ]
        },
        {
          "name": "_setEditor",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 289,
              "column": 4
            },
            "end": {
              "line": 317,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "code"
            },
            {
              "name": "theme"
            },
            {
              "name": "tabSize"
            },
            {
              "name": "lineNumbers"
            },
            {
              "name": "mode"
            },
            {
              "name": "autofocus"
            },
            {
              "name": "readonly"
            },
            {
              "name": "highlightLines"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_cleanExistingEditor",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 319,
              "column": 4
            },
            "end": {
              "line": 321,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_highlightLines",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 323,
              "column": 4
            },
            "end": {
              "line": 328,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_concatSingleValuesandRanges",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 330,
              "column": 4
            },
            "end": {
              "line": 333,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "lines"
            }
          ]
        },
        {
          "name": "_highlightLine",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 335,
              "column": 4
            },
            "end": {
              "line": 337,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "lineNumber"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_addLineClass",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 339,
              "column": 4
            },
            "end": {
              "line": 341,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "lineNumber"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_getNumbersInRange",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 343,
              "column": 4
            },
            "end": {
              "line": 354,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "range"
            }
          ]
        },
        {
          "name": "getValue",
          "description": "Gets the current editor content.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 360,
              "column": 4
            },
            "end": {
              "line": 364,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "String",
            "desc": "Editor content."
          }
        },
        {
          "name": "_formatCode",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 366,
              "column": 4
            },
            "end": {
              "line": 371,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        }
      ],
      "staticMethods": [],
      "demos": [
        {
          "url": "demo/index.html",
          "description": ""
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 111,
          "column": 2
        },
        "end": {
          "line": 372,
          "column": 3
        }
      },
      "privacy": "public",
      "superclass": "Polymer.Element",
      "name": "CellsCodemirror",
      "attributes": [
        {
          "name": "content",
          "description": "Code to render. Use this property instead of `sourceElement`\nif you want to update the editor's content.",
          "sourceRange": {
            "start": {
              "line": 122,
              "column": 8
            },
            "end": {
              "line": 124,
              "column": 9
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "source-element",
          "description": "CSS selector of an element with the content to display using `innerHTML`.\nThe element can be any HTML element but it's recommended to use a `<template>`\nor a `<script type=\"unrecognized\">` for the javascript mode to prevent the\nbrowser executing the code. The element is found using `document.querySelector()`\nso it can be placed in the component's Light DOM or at any other point in the document.\n\nHas precedence over `content` property.\nUpdating `content` when `sourceElement` is used has no effect.",
          "sourceRange": {
            "start": {
              "line": 136,
              "column": 8
            },
            "end": {
              "line": 138,
              "column": 9
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "theme",
          "description": "Theme to use. (material | mdn-like | monokai | cells).",
          "sourceRange": {
            "start": {
              "line": 148,
              "column": 8
            },
            "end": {
              "line": 151,
              "column": 9
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "tab-size",
          "description": "Width of the tab character.",
          "sourceRange": {
            "start": {
              "line": 156,
              "column": 8
            },
            "end": {
              "line": 159,
              "column": 9
            }
          },
          "metadata": {},
          "type": "number | null | undefined"
        },
        {
          "name": "line-numbers",
          "description": "Whether to show line numbers to the left of the editor.",
          "sourceRange": {
            "start": {
              "line": 164,
              "column": 8
            },
            "end": {
              "line": 167,
              "column": 9
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "mode",
          "description": "Language mode.\nSupported modes are `javascript`, `css` and `htmlmixed` (default).",
          "sourceRange": {
            "start": {
              "line": 173,
              "column": 8
            },
            "end": {
              "line": 176,
              "column": 9
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "autofocus",
          "description": "Sets whether the editor should focus itself on initialization.",
          "sourceRange": {
            "start": {
              "line": 181,
              "column": 8
            },
            "end": {
              "line": 184,
              "column": 9
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "readonly",
          "description": "Sets the editor as read-only (not editable).",
          "sourceRange": {
            "start": {
              "line": 189,
              "column": 8
            },
            "end": {
              "line": 192,
              "column": 9
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "nocursor",
          "description": "Disables focusing the editor when `readonly` is set to `true`.",
          "sourceRange": {
            "start": {
              "line": 197,
              "column": 8
            },
            "end": {
              "line": 200,
              "column": 9
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "format-button",
          "description": "Sets whether to show a button to format the selected text.\nThe button is disabled until a selection is made.",
          "sourceRange": {
            "start": {
              "line": 220,
              "column": 8
            },
            "end": {
              "line": 223,
              "column": 9
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "editor",
          "description": "The CodeMirror instance. You can use it to call any CodeMirror method\nnot provided by this component once the editor is initialized.\nCodeMirror docs: https://codemirror.net/doc/manual.html#api",
          "sourceRange": {
            "start": {
              "line": 230,
              "column": 8
            },
            "end": {
              "line": 232,
              "column": 9
            }
          },
          "metadata": {},
          "type": "Object | null | undefined"
        },
        {
          "name": "highlight-lines",
          "description": "Highlight one or multiple lines separated by commas. (1,3,7)\nTo specify a range separate the from and to values by a dash. (5-9)",
          "sourceRange": {
            "start": {
              "line": 238,
              "column": 8
            },
            "end": {
              "line": 240,
              "column": 9
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        }
      ],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "cells-codemirror"
    }
  ]
}
